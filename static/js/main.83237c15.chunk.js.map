{"version":3,"sources":["components/TodolistsList/Todolist/Todolist.module.css","components/TodolistsList/TodolistList.module.css","api/api.ts","redux/app-reducer.ts","utils/error-utils.ts","redux/todolists-reducer.ts","features/AddItemForm/AddItemForm.tsx","features/EditableSpan/EditableText.tsx","redux/tasks-reducer.ts","components/Task/Task.tsx","features/TitleForTodolist.tsx","components/TodolistsList/Todolist/Todolist.tsx","redux/auth-reducer.ts","components/Login/Login.tsx","components/TodolistsList/TodolistsList.tsx","features/ErrorSnackbar/ErrorSnackbar.tsx","App.tsx","redux/store.ts","index.tsx","components/Login/Login.module.css","components/Task/Task.module.css"],"names":["module","exports","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","id","delete","put","taskAPI","todolistId","taskId","model","authAPI","email","password","rememberMe","captcha","securityAPI","initialState","status","error","setAppErrorAC","type","setAppStatusAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","AddItemForm","React","memo","addItem","disabled","label","useState","setTitle","setError","addItemHandler","trim","style","height","margin","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","color","EditableText","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","width","wordWrap","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","Task","useDispatch","removeTask","useCallback","removeTaskAC","removeTaskTC","onTitleChangeHandler","newValue","changeStatus","checked","Completed","New","className","isDone","text","Checkbox","icon","checkedIcon","TitleForTodolist","entityStatus","removeTodolist","display","justifyContent","alignItems","fontSize","fontWeight","Todolist","todolist","addTask","item","addTaskTC","removeTodolistAC","changeTodolistTitle","changeTodolistTitleAC","changeTodolistTitleTC","changeFilter","filter","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","useEffect","items","setTasksAC","map","buttons","Button","SET_USER_DATA","GET_CAPTCHA_URL_SUCCESS","SET_ERROR","login","isAuth","captchaUrl","setAuthUserData","payload","getCaptchaUrlSuccess","errorMessage","getAuthUserData","response","getCaptchaUrl","url","Login","useSelector","state","auth","to","container","href","target","dataText","initialValues","undefined","validate","values","onSubmit","errors","touched","handleChange","handleBlur","handleSubmit","textFild","name","FormGroup","FormControlLabel","control","textAlign","src","alt","border","padding","borderRadius","TodolistsList","todolists","addTodolist","addTodolistTC","Grid","tl","Paper","Alert","forwardRef","props","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","App","AppBar","position","Container","fixed","Toolbar","textDecoration","LinearProgress","bottom","path","element","rootReducer","combineReducers","todoListId","copyState","forEach","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83237c15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Todolist_buttons__24-44\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"TodolistList_title__2a-hP\",\"todolists\":\"TodolistList_todolists__31HnK\"};","import axios, {AxiosResponse} from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': 'e72442e7-e84c-4575-88b8-fbca240ffc79'\n    }\n})\n\n// api\nexport const todolistAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists');\n    },\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\n    },\n}\n\nexport const taskAPI = {\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\nexport const authAPI = {\n    me() {\n        return instance.get(`auth/me`)\n    },\n    login(email: string, password: string, rememberMe: boolean, captcha: string | undefined) {\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha})\n    },\n    logout() {\n        return instance.delete(`auth/login`)\n    }\n}\n\nexport const securityAPI = {\n    getCaptchaUrl() {\n        return instance.get(`security/get-captcha-url`)\n    }\n}\n\n// types\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\n\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","const initialState: InitialStateType = {\n    status: 'idle',\n    error: null\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        default:\n            return {...state}\n    }\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n    status: RequestStatusType\n    error: string | null\n}\n\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\n\ntype ActionsType =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../redux/app-reducer'\nimport {ResponseType} from '../api/api'\nimport {Dispatch} from 'redux'\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\n    dispatch(setAppStatusAC('failed'))\n}\n","import {todolistAPI, TodolistType} from '../api/api'\nimport {Dispatch} from 'redux'\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from './app-reducer'\nimport {handleServerAppError, handleServerNetworkError} from '../utils/error-utils';\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id !== action.id)\n        case 'ADD-TODOLIST':\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case 'CHANGE-TODOLIST-FILTER':\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\n        case 'SET-TODOLISTS':\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\n    type: 'CHANGE-TODOLIST-TITLE',\n    id,\n    title\n} as const)\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\n    type: 'CHANGE-TODOLIST-FILTER',\n    id,\n    filter\n} as const)\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status\n} as const)\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\n\n// thunks\nexport const fetchTodolistsTC = () => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistAPI.getTodolists()\n            .then((res) => {\n                dispatch(setTodolistsAC(res.data))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const removeTodolistTC = (todolistId: string) => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        todolistAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(removeTodolistAC(todolistId))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const addTodolistTC = (title: string) => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistAPI.createTodolist(title)\n            .then((res) => {\n                dispatch(addTodolistAC(res.data.data.item))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        todolistAPI.updateTodolist(id, title)\n            .then((res) => {\n                if (res.data.resultCode === 0) {\n                    dispatch(changeTodolistTitleAC(id, title))\n                } else if (res.data.resultCode === 1) {\n                    handleServerAppError(res.data, dispatch);\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n}\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\ntype ActionsType =\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | SetTodolistsActionType\n    | ReturnType<typeof changeTodolistEntityStatusAC>\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport AddOutlinedIcon from '@mui/icons-material/AddOutlined';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n    label: string\n}\n\nexport const AddItemForm = React.memo(function ({addItem, disabled = false, label}: AddItemFormPropsType) {\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const addItemHandler = () => {\n        if (title.trim() !== '') {\n            addItem(title);\n            setTitle('');\n        } else {\n            setError('Title is required');\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItemHandler();\n        }\n    }\n\n    return <div style={{height: '100%', margin: '15px 5px'}}>\n        <TextField variant=\"outlined\"\n                   disabled={disabled}\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label={label}\n                   helperText={error}\n        />\n        <IconButton onClick={addItemHandler} disabled={disabled} style={{margin: '8px 5px'}}><AddOutlinedIcon\n            color=\"primary\"/></IconButton>\n    </div>\n})\n","import TextField from '@mui/material/TextField';\nimport React, {ChangeEvent, useState} from 'react';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableText = React.memo(function ({value, onChange}: EditableSpanPropsType) {\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <div onDoubleClick={activateEditMode} style={{\n            width: '200px', wordWrap: 'break-word'\n        }}>{value}</div>\n});\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\nimport {TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType, taskAPI} from '../api/api'\nimport { Dispatch } from 'redux'\nimport { AppRootStateType } from './store'\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from './app-reducer'\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils'\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\n    type: 'UPDATE-TASK',\n    model,\n    todolistId,\n    taskId\n} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\n    type: 'SET-TASKS',\n    tasks,\n    todolistId\n} as const)\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    taskAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            dispatch(setTasksAC(tasks, todolistId))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    taskAPI.deleteTask(todolistId, taskId)\n        .then(res => {\n            const action = removeTaskAC(taskId, todolistId)\n            dispatch(action)\n        })\n}\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    taskAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const task = res.data.data.item\n                const action = addTaskAC(task)\n                dispatch(action)\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n\n        taskAPI.updateTask(todolistId, taskId, apiModel)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\n                    dispatch(action)\n                } else {\n                    handleServerAppError(res.data, dispatch);\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n","import React, {useCallback} from 'react'\nimport {EditableText} from '../../features/EditableSpan/EditableText'\nimport ClearIcon from '@mui/icons-material/Clear';\nimport IconButton from '@mui/material/IconButton';\nimport Checkbox from '@mui/material/Checkbox';\nimport {TaskStatuses, TaskType} from '../../api/api'\nimport {removeTaskTC, updateTaskTC} from '../../redux/tasks-reducer';\nimport {useDispatch} from 'react-redux';\nimport RadioButtonUncheckedIcon from '@mui/icons-material/RadioButtonUnchecked';\nimport RadioButtonCheckedIcon from '@mui/icons-material/RadioButtonChecked';\n// @ts-ignore\nimport style from './Task.module.css'\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n}\nexport const Task = React.memo(({task, todolistId}: TaskPropsType) => {\n    const dispatch = useDispatch()\n\n    const removeTask = useCallback((id: string, todolistId: string) => dispatch(removeTaskTC(id, todolistId)), [task.id, todolistId])\n    const onTitleChangeHandler = useCallback((newValue: string) => dispatch(updateTaskTC(task.id, {title: newValue}, todolistId)), [task.id, todolistId]);\n    const changeStatus = useCallback((taskId: string, checked: boolean, todolistId: string) => {\n        let status = checked ? TaskStatuses.Completed : TaskStatuses.New\n        dispatch(updateTaskTC(taskId, {status}, todolistId))\n    }, [task.id, todolistId])\n\n    return <div key={task.id}\n                className={style.task + ' ' + `${task.status === TaskStatuses.Completed ? `${style.isDone}` : ''}`}>\n        <div className={style.text}>\n            <Checkbox\n                checked={task.status === TaskStatuses.Completed}\n                icon={<RadioButtonUncheckedIcon/>} checkedIcon={<RadioButtonCheckedIcon/>}\n                color=\"default\"\n                onChange={(e) => {\n                    changeStatus(task.id, e.currentTarget.checked, todolistId)\n                }}\n            />\n            <EditableText value={task.title} onChange={onTitleChangeHandler}/>\n        </div>\n        <IconButton onClick={() => removeTask(task.id, todolistId)}><ClearIcon/></IconButton>\n    </div>\n})\n","import React from 'react';\nimport IconButton from '@mui/material/IconButton';\nimport {EditableText} from './EditableSpan/EditableText';\nimport ClearIcon from '@mui/icons-material/Clear';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n    id: string\n    entityStatus: string\n    removeTodolist: (id: string) => void\n}\n\nexport const TitleForTodolist = React.memo(({\n                                                entityStatus,\n                                                id,\n                                                removeTodolist,\n                                                value,\n                                                onChange\n                                            }: EditableSpanPropsType) => {\n    return <div style={{display: 'flex', justifyContent: 'space-between', alignItems: 'center', margin: '10px 5px'}}>\n        <span style={{fontSize: '20px', fontWeight: '700'}}><EditableText value={value} onChange={onChange}/></span>\n        <IconButton onClick={() => removeTodolist(id)} disabled={entityStatus === 'loading'}><ClearIcon/></IconButton>\n    </div>\n});\n","import React, {useCallback, useEffect} from 'react'\nimport {AddItemForm} from '../../../features/AddItemForm/AddItemForm'\nimport Button from '@mui/material/Button';\nimport {Task} from '../../Task/Task'\nimport {TaskStatuses, TaskType} from '../../../api/api'\nimport {\n    changeTodolistFilterAC,\n    changeTodolistTitleTC,\n    FilterValuesType,\n    removeTodolistTC,\n    TodolistDomainType\n} from '../../../redux/todolists-reducer'\nimport {useDispatch} from 'react-redux'\nimport {addTaskTC, fetchTasksTC} from '../../../redux/tasks-reducer'\nimport {TitleForTodolist} from '../../../features/TitleForTodolist';\n// @ts-ignore\nimport style from './Todolist.module.css'\n\ntype PropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n}\n\nexport const Todolist = React.memo(({todolist, tasks}: PropsType) => {\n    const dispatch = useDispatch()\n\n    const addTask = useCallback((title: string) => dispatch(addTaskTC(title, todolist.id)), [todolist.id])\n    const removeTodolist = useCallback((id: string) => dispatch(removeTodolistTC(id)), [todolist.id])\n    const changeTodolistTitle = useCallback((title: string) => dispatch(changeTodolistTitleTC(todolist.id, title)), [todolist.id])\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => dispatch(changeTodolistFilterAC(todolistId, value)), [])\n\n    const onAllClickHandler = useCallback(() => changeFilter('all', todolist.id), [todolist.id, changeFilter])\n    const onActiveClickHandler = useCallback(() => changeFilter('active', todolist.id), [todolist.id, changeFilter])\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', todolist.id), [todolist.id, changeFilter])\n\n    let tasksForTodolist = tasks\n    if (todolist.filter === 'active') {\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (todolist.filter === 'completed') {\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    useEffect(() => {\n        dispatch(fetchTasksTC(todolist.id))\n    }, [todolist])\n\n    return <div className={style.todolist}>\n        <TitleForTodolist value={todolist.title} onChange={changeTodolistTitle} id={todolist.id}\n                          entityStatus={todolist.entityStatus}\n                          removeTodolist={removeTodolist}\n        />\n        <AddItemForm addItem={addTask} disabled={todolist.entityStatus === 'loading'} label=\"Title for task\"/>\n        <div>\n            {tasksForTodolist &&\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={todolist.id}/>)\n            }\n        </div>\n        <div className={style.buttons}>\n            <Button variant={todolist.filter === 'all' ? 'contained' : 'outlined'}\n                    onClick={onAllClickHandler}\n                    color={'primary'}\n            >\n                All\n            </Button>\n            <Button variant={todolist.filter === 'active' ? 'contained' : 'outlined'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>\n                Active\n            </Button>\n            <Button variant={todolist.filter === 'completed' ? 'contained' : 'outlined'}\n                    onClick={onCompletedClickHandler}\n                    color={'primary'}>\n                Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import {authAPI, securityAPI} from '../api/api';\nimport {setAppStatusAC} from './app-reducer';\n\n//types\nconst SET_USER_DATA = 'AUTH_SET_USER_DATA'\nconst GET_CAPTCHA_URL_SUCCESS = 'GET_CAPTCHA_URL_SUCCESS'\nconst SET_ERROR = 'SET_ERROR'\ntype setAuthUserDataPayloadType = { id: number | null, email: string | null, login: string | null, isAuth: boolean }\ntype setAuthUserDataType = {\n    type: typeof SET_USER_DATA,\n    payload: setAuthUserDataPayloadType\n}\ntype getCaptchaUrlSuccessType = { type: typeof GET_CAPTCHA_URL_SUCCESS, payload: { captchaUrl: string } }\n\nexport type authStateType = {\n    id: number | null,\n    email: string | null,\n    login: string | null,\n    isAuth: false,\n    captchaUrl: string | null,\n    error: string\n}\n\n//initial state\nlet initialState: authStateType = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false,\n    captchaUrl: null,\n    error: ''\n}\n\n//reducer\nexport const authReducer = (state: authStateType = initialState, action: any): authStateType => {\n    switch (action.type) {\n        case SET_USER_DATA:\n        case GET_CAPTCHA_URL_SUCCESS: {\n            return {...state, ...action.payload}\n        }\n        case SET_ERROR: {\n            return {...state, error: action.payload}\n        }\n\n        default:\n            return state;\n    }\n}\n\n//action creators\nexport const setAuthUserData = (id: number | null, email: string | null, login: string | null, isAuth: boolean): setAuthUserDataType => (\n    {type: SET_USER_DATA, payload: {id, email, login, isAuth}})\n\nexport const getCaptchaUrlSuccess = (captchaUrl: string): getCaptchaUrlSuccessType => ({\n    type: GET_CAPTCHA_URL_SUCCESS,\n    payload: {captchaUrl}\n})\n\nexport const setError = (errorMessage: string): any => ({type: SET_ERROR, payload: errorMessage})\n\n//thanks\nexport const getAuthUserData = () => async (dispatch: any) => {\n    dispatch(setAppStatusAC('loading'))\n    let response = await authAPI.me();\n    // @ts-ignore\n    if (response.data.resultCode === 0) {\n        // @ts-ignore\n        let {id, login, email} = response.data.data;\n        dispatch(setAuthUserData(id, email, login, true))\n    }\n    dispatch(setAppStatusAC('idle'))\n}\n\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: any) => async (dispatch: any) => {\n    dispatch(setAppStatusAC('loading'))\n    const response = await authAPI.login(email, password, rememberMe, captcha)\n    // @ts-ignore\n    if (response.data.resultCode === 0) {\n        dispatch(getAuthUserData())\n    } else {\n        // @ts-ignore\n        if (response.data.resultCode === 10) {\n            dispatch(getCaptchaUrl())\n        }\n        // @ts-ignore\n        let message = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\n        dispatch(setError(message))\n    }\n    dispatch(setAppStatusAC('idle'))\n}\n\nexport const logout = () => async (dispatch: any) => {\n    dispatch(setAppStatusAC('loading'))\n    const response = await authAPI.logout()\n    // @ts-ignore\n    if (response.data.resultCode === 0) {\n        dispatch(setAuthUserData(null, null, null, false))\n    }\n    dispatch(setError(''))\n    dispatch(setAppStatusAC('idle'))\n}\n\nexport const getCaptchaUrl = () => async (dispatch: any) => {\n    dispatch(setAppStatusAC('loading'))\n    const response = await securityAPI.getCaptchaUrl()\n    // @ts-ignore\n    const captchaUrl = response.data.url\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\n    dispatch(setAppStatusAC('idle'))\n}","import React from 'react';\nimport {Formik} from 'formik';\nimport {authStateType, login} from '../../redux/auth-reducer';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppRootStateType} from '../../redux/store';\nimport {Navigate} from 'react-router-dom';\nimport style from './Login.module.css'\nimport {Button, Checkbox, FormControlLabel, FormGroup, TextField} from '@mui/material';\n\nconst Login = () => {\n    const dispatch = useDispatch()\n    const {isAuth, captchaUrl, error} = useSelector<AppRootStateType, authStateType>((state) => state.auth)\n\n    if (isAuth) {\n        return <Navigate to={'/'}/>\n    }\n\n    return (\n        <div className={style.container}>\n            <div className={style.text}>Hello! You can register<a href=\"https://social-network.samuraijs.com/\"\n                                                                  target=\"_blank\">here</a>\n                or use this data to log in:\n                <div className={style.dataText}>\n                    <div>Email: <span>free@samuraijs.com</span></div>\n                    <div>Password: <span>free</span></div>\n                </div>\n            </div>\n            <Formik\n                initialValues={{email: '', password: '', rememberMe: false, captchaUrl: undefined}}\n                validate={values => {\n                    const errors = {};\n                    if (!values.email) {\n                        // @ts-ignore\n                        errors.email = 'Required';\n                    }\n                }}\n                onSubmit={(values) => {\n                    dispatch(login(values.email, values.password, values.rememberMe, values.captchaUrl))\n                }}\n            >\n                {({\n                      values,\n                      errors,\n                      touched,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                  }) => (\n                    <form onSubmit={handleSubmit}>\n                        <div className={style.textFild}>Your email</div>\n                        <TextField\n                            type=\"email\"\n                            name=\"email\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                        />\n\n                        {errors.email && touched.email && errors.email}\n                        <div className={style.textFild}>Your password</div>\n                        <TextField\n                            type=\"password\"\n                            name=\"password\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.password}\n                        />\n\n                        {errors.password && touched.password && errors.password}\n                        <FormGroup>\n                            <FormControlLabel control={<Checkbox\n                                name=\"rememberMe\"\n                                onChange={handleChange}\n                                checked={values.rememberMe}\n                            />} label=\"Remember me\"/>\n                        </FormGroup>\n\n                        {captchaUrl && <div>\n                            <p style={{textAlign: 'center'}}><img src={captchaUrl} alt=\"captcha\"/></p>\n                            <TextField\n                                type=\"text\"\n                                name=\"captchaUrl\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.captchaUrl}\n                            />\n\n                        </div>}\n\n                        {error &&\n                            <div style={{\n                                border: '#f32020 2px solid',\n                                padding: '10px',\n                                color: '#fc8d8d',\n                                borderRadius: '7px',\n                                margin: '10px 0'\n                            }}><p style={{textAlign: 'center', margin: '0'}}>{error}</p></div>\n                        }\n                        <Button type=\"submit\" variant=\"contained\">\n                            Submit\n                        </Button>\n                    </form>\n                )}\n            </Formik>\n        </div>\n    );\n};\n\nexport default Login;","import React, {useCallback, useEffect} from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from '../../redux/store'\nimport {addTodolistTC, fetchTodolistsTC, TodolistDomainType} from '../../redux/todolists-reducer'\nimport {TasksStateType} from '../../redux/tasks-reducer'\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport {AddItemForm} from '../../features/AddItemForm/AddItemForm'\nimport {Todolist} from './Todolist/Todolist'\nimport {authStateType} from '../../redux/auth-reducer';\nimport Login from '../Login/Login'\nimport style from './TodolistList.module.css'\n\nexport const TodolistsList: React.FC = () => {\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const {isAuth} = useSelector<AppRootStateType, authStateType>((state) => state.auth)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchTodolistsTC())\n    }, [isAuth])\n\n    const addTodolist = useCallback((title: string) => {\n        dispatch(addTodolistTC(title))\n    }, [])\n\n    return <>\n        {\n            isAuth\n                ?\n                <>\n                    <Grid container className={style.title}>\n                        <AddItemForm addItem={addTodolist} label=\"Title for to do list\"/>\n                    </Grid>\n                    <Grid container>\n                        <div className={style.todolists}>\n                            {todolists.map(tl => {\n                                let tasksForTodolist = tasks[tl.id]\n\n                                if (tasksForTodolist) {\n                                    return <Grid item key={tl.id}>\n                                        <Paper style={{padding: '10px', margin: '20px', width: '330px'}}>\n                                            <Todolist\n                                                todolist={tl}\n                                                tasks={tasksForTodolist}\n                                            />\n                                        </Paper>\n                                    </Grid>\n                                }\n                            })}\n                        </div>\n                    </Grid>\n                </>\n                :\n                <Login/>\n        }\n    </>\n}\n","import React, {SyntheticEvent} from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from '../../redux/store';\nimport { setAppErrorAC } from '../../redux/app-reducer';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\nexport function ErrorSnackbar() {\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n\n    const dispatch = useDispatch();\n\n    const handleClose = (event?: Event | SyntheticEvent<any, Event>, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null))\n    };\n\n    return (\n        <div style={{margin: \"0 auto\"}}>\n            <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n                <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                    {error}\n                </Alert>\n            </Snackbar>\n        </div>\n    );\n}\n","import React, {useEffect} from 'react'\nimport {TodolistsList} from './components/TodolistsList/TodolistsList'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {AppRootStateType} from './redux/store'\nimport {RequestStatusType} from './redux/app-reducer'\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport {ErrorSnackbar} from './features/ErrorSnackbar/ErrorSnackbar'\nimport {Link, Route, Routes} from 'react-router-dom';\nimport Login from './components/Login/Login';\nimport {getAuthUserData, authStateType, logout} from './redux/auth-reducer';\n\nfunction App() {\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\n    const {isAuth} = useSelector<AppRootStateType, authStateType>((state) => state.auth)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getAuthUserData())\n    }, [])\n\n    return (\n        <>\n            <ErrorSnackbar/>\n            <AppBar position=\"relative\">\n                <Container fixed>\n                    <Toolbar style={{display: 'flex', justifyContent: 'flex-end'}}>\n                        <Link to={'/login'} style={{color: 'white', textDecoration: 'none'}}>\n                            {isAuth &&\n                                <Button color=\"inherit\" variant=\"outlined\"\n                                        onClick={() => {\n                                            dispatch(logout())\n                                        }}\n                                >Logout</Button>}\n                        </Link>\n                    </Toolbar>\n                    {status === 'loading' &&\n                        <LinearProgress style={{\n                            position: 'absolute',\n                            bottom: '-4px',\n                            width: '100%'\n                        }}/>\n                    }\n                </Container>\n            </AppBar>\n            <Container fixed style={{margin: '20px auto'}}>\n                <Routes>\n                    <Route path=\"/\" element={<TodolistsList/>}/>\n                    <Route path=\"/login\" element={<Login/>}/>\n                </Routes>\n            </Container>\n        </>\n    )\n}\n\nexport default App\n","import {tasksReducer} from './tasks-reducer';\nimport {todolistsReducer} from './todolists-reducer';\nimport {applyMiddleware, combineReducers, compose, createStore} from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport {appReducer} from './app-reducer'\nimport {authReducer} from './auth-reducer';\n\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunkMiddleware)\n));\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App/>\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Login_container__1Oz4Y\",\"title\":\"Login_title__bh47u\",\"text\":\"Login_text__llltc\",\"dataText\":\"Login_dataText__1W4jP\",\"textFild\":\"Login_textFild__m8VTG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__1IAtP\",\"text\":\"Task_text__7szr-\",\"isDone\":\"Task_isDone__J6EDt\"};"],"sourceRoot":""}